set noundofile
set relativenumber
set number

syntax on
set background=dark

set shiftwidth=4
set softtabstop=4
set expandtab

set cinoptions=:0,g0,l1,t0
let g:load_doxygen_syntax=1
"set completeopt=menu

set listchars=tab:▸\ ,eol:¬

set nocompatible
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Bundle 'jistr/vim-nerdtree-tabs'
Plugin 'majutsushi/tagbar'
Plugin 'kien/ctrlp.vim'
Plugin 'bling/vim-airline'
"Plugin 'mileszs/ack.vim'
Plugin 'embear/vim-localvimrc'
"Plugin 'tmatilai/gitolite.vim'
Plugin 'DirDiff.vim'
Plugin 'sjl/splice.vim'
"Plugin 'Rip-Rip/clang_complete'
Plugin 'altercation/vim-colors-solarized'
Plugin 'fidian/hexmode'
Plugin 'easymotion/vim-easymotion'
Plugin 'AndrewRadev/linediff.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList          - list configured plugins
" :PluginInstall(!)    - install (update) plugins
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

nmap <F3> :set list!<CR>
nnoremap <Leader>n :NERDTreeTabsToggle<CR>
nnoremap <Leader>t :TagbarToggle<CR>
nnoremap <Leader>hm :Hexmode<CR>

let g:EasyMotion_do_mapping = 0
nmap s <Plug>(easymotion-s2)
nmap t <Plug>(easymotion-t2)
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
let g:EasyMotion_smartcase = 1

let g:localvimrc_ask = 0
let g:DirDiffDynamicDiffText = 1
let g:clang_use_library = 1
let g:clang_close_preview = 1

set laststatus=2

let g:solarized_termcolors=256
colorscheme solarized

let NERDTreeIgnore=['\.pyc$', '\~$']

if has("cscope")
    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set cscopetag

    " check cscope for definition of a symbol before checking ctags: set to 1
    " if you want the reverse search order.
    set csto=0

    if filereadable("cscope.out")
        cs add cscope.out
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif

    " show msg when any other cscope db added
    set cscopeverbose

    " The following maps all invoke one of the following cscope search types:
    "
    "   's'   symbol: find all references to the token under cursor
    "   'g'   global: find global definition(s) of the token under cursor
    "   'c'   calls:  find all calls to the function name under cursor
    "   't'   text:   find all instances of the text under cursor
    "   'e'   egrep:  egrep search for the word under cursor
    "   'f'   file:   open the filename under cursor
    "   'i'   includes: find files that include the filename under cursor
    "   'd'   called: find functions that function under cursor calls
    "
    " All of the maps involving the <cfile> macro use '^<cfile>$': this is so
    " that searches over '#include <time.h>" return only references to
    " 'time.h', and not 'sys/time.h', etc. (by default cscope will return all
    " files that contain 'time.h' as part of their name).

    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

    nmap <C-_>s :scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>g :scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>c :scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>t :scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>e :scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-_>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-_>d :scs find d <C-R>=expand("<cword>")<CR><CR>

    " (Note: you may wish to put a 'set splitright' in your .vimrc
    " if you prefer the new window on the right instead of the left
    nmap <C-_><C-_>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_><C-_>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_><C-_>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_><C-_>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_><C-_>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-_><C-_>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-_><C-_>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-_><C-_>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>

    " By default Vim will only wait 1 second for each keystroke in a mapping.
    " You may find that too short with the above typemaps.  If so, you should
    " either turn off mapping timeouts via 'notimeout'.
    "
    "set notimeout
    "
    " Or, you can keep timeouts, by uncommenting the timeoutlen line below,
    " with your own personal favorite value (in milliseconds):
    "
    "set timeoutlen=4000
    "
    " Either way, since mapping timeout settings by default also set the
    " timeouts for multicharacter 'keys codes' (like <F1>), you should also
    " set ttimeout and ttimeoutlen: otherwise, you will experience strange
    " delays as vim waits for a keystroke after you hit ESC (it will be
    " waiting to see if the ESC is actually part of a key code like <F1>).
    "
    "set ttimeout
    "
    " personally, I find a tenth of a second to work well for key code
    " timeouts. If you experience problems and have a slow terminal or network
    " connection, set it higher.  If you don't set ttimeoutlen, the value for
    " timeoutlent (default: 1000 = 1 second, which is sluggish) is used.
    "
    "set ttimeoutlen=100
endif
